== Physical Plan ==
TakeOrderedAndProject (45)
+- * HashAggregate (44)
   +- Exchange (43)
      +- * HashAggregate (42)
         +- * Project (41)
            +- * SortMergeJoin Inner (40)
               :- * Sort (25)
               :  +- Exchange (24)
               :     +- * Project (23)
               :        +- * BroadcastHashJoin Inner BuildRight (22)
               :           :- * Project (17)
               :           :  +- * BroadcastHashJoin Inner BuildRight (16)
               :           :     :- * Project (10)
               :           :     :  +- * BroadcastHashJoin Inner BuildRight (9)
               :           :     :     :- * Filter (3)
               :           :     :     :  +- * ColumnarToRow (2)
               :           :     :     :     +- Scan parquet default.store_sales (1)
               :           :     :     +- BroadcastExchange (8)
               :           :     :        +- * Project (7)
               :           :     :           +- * Filter (6)
               :           :     :              +- * ColumnarToRow (5)
               :           :     :                 +- Scan parquet default.item (4)
               :           :     +- BroadcastExchange (15)
               :           :        +- * Project (14)
               :           :           +- * Filter (13)
               :           :              +- * ColumnarToRow (12)
               :           :                 +- Scan parquet default.date_dim (11)
               :           +- BroadcastExchange (21)
               :              +- * Filter (20)
               :                 +- * ColumnarToRow (19)
               :                    +- Scan parquet default.store (18)
               +- * Sort (39)
                  +- Exchange (38)
                     +- * Project (37)
                        +- * SortMergeJoin Inner (36)
                           :- * Sort (30)
                           :  +- Exchange (29)
                           :     +- * Filter (28)
                           :        +- * ColumnarToRow (27)
                           :           +- Scan parquet default.customer (26)
                           +- * Sort (35)
                              +- Exchange (34)
                                 +- * Filter (33)
                                    +- * ColumnarToRow (32)
                                       +- Scan parquet default.customer_address (31)


(1) Scan parquet default.store_sales
Output [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_ext_sales_price#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_item_sk), IsNotNull(ss_customer_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ext_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 4]
Input [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_ext_sales_price#5]

(3) Filter [codegen id : 4]
Input [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_ext_sales_price#5]
Condition : (((isnotnull(ss_sold_date_sk#1) AND isnotnull(ss_item_sk#2)) AND isnotnull(ss_customer_sk#3)) AND isnotnull(ss_store_sk#4))

(4) Scan parquet default.item
Output [6]: [i_item_sk#6, i_brand_id#7, i_brand#8, i_manufact_id#9, i_manufact#10, i_manager_id#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_manager_id), EqualTo(i_manager_id,8), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_brand:string,i_manufact_id:int,i_manufact:string,i_manager_id:int>

(5) ColumnarToRow [codegen id : 1]
Input [6]: [i_item_sk#6, i_brand_id#7, i_brand#8, i_manufact_id#9, i_manufact#10, i_manager_id#11]

(6) Filter [codegen id : 1]
Input [6]: [i_item_sk#6, i_brand_id#7, i_brand#8, i_manufact_id#9, i_manufact#10, i_manager_id#11]
Condition : ((isnotnull(i_manager_id#11) AND (i_manager_id#11 = 8)) AND isnotnull(i_item_sk#6))

(7) Project [codegen id : 1]
Output [5]: [i_item_sk#6, i_brand_id#7, i_brand#8, i_manufact_id#9, i_manufact#10]
Input [6]: [i_item_sk#6, i_brand_id#7, i_brand#8, i_manufact_id#9, i_manufact#10, i_manager_id#11]

(8) BroadcastExchange
Input [5]: [i_item_sk#6, i_brand_id#7, i_brand#8, i_manufact_id#9, i_manufact#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#12]

(9) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#6]
Join condition: None

(10) Project [codegen id : 4]
Output [8]: [ss_sold_date_sk#1, ss_customer_sk#3, ss_store_sk#4, ss_ext_sales_price#5, i_brand_id#7, i_brand#8, i_manufact_id#9, i_manufact#10]
Input [10]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_ext_sales_price#5, i_item_sk#6, i_brand_id#7, i_brand#8, i_manufact_id#9, i_manufact#10]

(11) Scan parquet default.date_dim
Output [3]: [d_date_sk#13, d_year#14, d_moy#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,11), EqualTo(d_year,1998), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(12) ColumnarToRow [codegen id : 2]
Input [3]: [d_date_sk#13, d_year#14, d_moy#15]

(13) Filter [codegen id : 2]
Input [3]: [d_date_sk#13, d_year#14, d_moy#15]
Condition : ((((isnotnull(d_moy#15) AND isnotnull(d_year#14)) AND (d_moy#15 = 11)) AND (d_year#14 = 1998)) AND isnotnull(d_date_sk#13))

(14) Project [codegen id : 2]
Output [1]: [d_date_sk#13]
Input [3]: [d_date_sk#13, d_year#14, d_moy#15]

(15) BroadcastExchange
Input [1]: [d_date_sk#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#16]

(16) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#13]
Join condition: None

(17) Project [codegen id : 4]
Output [7]: [ss_customer_sk#3, ss_store_sk#4, ss_ext_sales_price#5, i_brand_id#7, i_brand#8, i_manufact_id#9, i_manufact#10]
Input [9]: [ss_sold_date_sk#1, ss_customer_sk#3, ss_store_sk#4, ss_ext_sales_price#5, i_brand_id#7, i_brand#8, i_manufact_id#9, i_manufact#10, d_date_sk#13]

(18) Scan parquet default.store
Output [2]: [s_store_sk#17, s_zip#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_zip), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_zip:string>

(19) ColumnarToRow [codegen id : 3]
Input [2]: [s_store_sk#17, s_zip#18]

(20) Filter [codegen id : 3]
Input [2]: [s_store_sk#17, s_zip#18]
Condition : (isnotnull(s_zip#18) AND isnotnull(s_store_sk#17))

(21) BroadcastExchange
Input [2]: [s_store_sk#17, s_zip#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#19]

(22) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_store_sk#4]
Right keys [1]: [s_store_sk#17]
Join condition: None

(23) Project [codegen id : 4]
Output [7]: [ss_customer_sk#3, ss_ext_sales_price#5, i_brand_id#7, i_brand#8, i_manufact_id#9, i_manufact#10, s_zip#18]
Input [9]: [ss_customer_sk#3, ss_store_sk#4, ss_ext_sales_price#5, i_brand_id#7, i_brand#8, i_manufact_id#9, i_manufact#10, s_store_sk#17, s_zip#18]

(24) Exchange
Input [7]: [ss_customer_sk#3, ss_ext_sales_price#5, i_brand_id#7, i_brand#8, i_manufact_id#9, i_manufact#10, s_zip#18]
Arguments: hashpartitioning(ss_customer_sk#3, 5), ENSURE_REQUIREMENTS, [id=#20]

(25) Sort [codegen id : 5]
Input [7]: [ss_customer_sk#3, ss_ext_sales_price#5, i_brand_id#7, i_brand#8, i_manufact_id#9, i_manufact#10, s_zip#18]
Arguments: [ss_customer_sk#3 ASC NULLS FIRST], false, 0

(26) Scan parquet default.customer
Output [2]: [c_customer_sk#21, c_current_addr_sk#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>

(27) ColumnarToRow [codegen id : 6]
Input [2]: [c_customer_sk#21, c_current_addr_sk#22]

(28) Filter [codegen id : 6]
Input [2]: [c_customer_sk#21, c_current_addr_sk#22]
Condition : (isnotnull(c_customer_sk#21) AND isnotnull(c_current_addr_sk#22))

(29) Exchange
Input [2]: [c_customer_sk#21, c_current_addr_sk#22]
Arguments: hashpartitioning(c_current_addr_sk#22, 5), ENSURE_REQUIREMENTS, [id=#23]

(30) Sort [codegen id : 7]
Input [2]: [c_customer_sk#21, c_current_addr_sk#22]
Arguments: [c_current_addr_sk#22 ASC NULLS FIRST], false, 0

(31) Scan parquet default.customer_address
Output [2]: [ca_address_sk#24, ca_zip#25]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_zip)]
ReadSchema: struct<ca_address_sk:int,ca_zip:string>

(32) ColumnarToRow [codegen id : 8]
Input [2]: [ca_address_sk#24, ca_zip#25]

(33) Filter [codegen id : 8]
Input [2]: [ca_address_sk#24, ca_zip#25]
Condition : (isnotnull(ca_address_sk#24) AND isnotnull(ca_zip#25))

(34) Exchange
Input [2]: [ca_address_sk#24, ca_zip#25]
Arguments: hashpartitioning(ca_address_sk#24, 5), ENSURE_REQUIREMENTS, [id=#26]

(35) Sort [codegen id : 9]
Input [2]: [ca_address_sk#24, ca_zip#25]
Arguments: [ca_address_sk#24 ASC NULLS FIRST], false, 0

(36) SortMergeJoin [codegen id : 10]
Left keys [1]: [c_current_addr_sk#22]
Right keys [1]: [ca_address_sk#24]
Join condition: None

(37) Project [codegen id : 10]
Output [2]: [c_customer_sk#21, ca_zip#25]
Input [4]: [c_customer_sk#21, c_current_addr_sk#22, ca_address_sk#24, ca_zip#25]

(38) Exchange
Input [2]: [c_customer_sk#21, ca_zip#25]
Arguments: hashpartitioning(c_customer_sk#21, 5), ENSURE_REQUIREMENTS, [id=#27]

(39) Sort [codegen id : 11]
Input [2]: [c_customer_sk#21, ca_zip#25]
Arguments: [c_customer_sk#21 ASC NULLS FIRST], false, 0

(40) SortMergeJoin [codegen id : 12]
Left keys [1]: [ss_customer_sk#3]
Right keys [1]: [c_customer_sk#21]
Join condition: NOT (substr(ca_zip#25, 1, 5) = substr(s_zip#18, 1, 5))

(41) Project [codegen id : 12]
Output [5]: [ss_ext_sales_price#5, i_brand_id#7, i_brand#8, i_manufact_id#9, i_manufact#10]
Input [9]: [ss_customer_sk#3, ss_ext_sales_price#5, i_brand_id#7, i_brand#8, i_manufact_id#9, i_manufact#10, s_zip#18, c_customer_sk#21, ca_zip#25]

(42) HashAggregate [codegen id : 12]
Input [5]: [ss_ext_sales_price#5, i_brand_id#7, i_brand#8, i_manufact_id#9, i_manufact#10]
Keys [4]: [i_brand#8, i_brand_id#7, i_manufact_id#9, i_manufact#10]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#5))]
Aggregate Attributes [1]: [sum#28]
Results [5]: [i_brand#8, i_brand_id#7, i_manufact_id#9, i_manufact#10, sum#29]

(43) Exchange
Input [5]: [i_brand#8, i_brand_id#7, i_manufact_id#9, i_manufact#10, sum#29]
Arguments: hashpartitioning(i_brand#8, i_brand_id#7, i_manufact_id#9, i_manufact#10, 5), ENSURE_REQUIREMENTS, [id=#30]

(44) HashAggregate [codegen id : 13]
Input [5]: [i_brand#8, i_brand_id#7, i_manufact_id#9, i_manufact#10, sum#29]
Keys [4]: [i_brand#8, i_brand_id#7, i_manufact_id#9, i_manufact#10]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#5))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#5))#31]
Results [5]: [i_brand_id#7 AS brand_id#32, i_brand#8 AS brand#33, i_manufact_id#9, i_manufact#10, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#5))#31,17,2) AS ext_price#34]

(45) TakeOrderedAndProject
Input [5]: [brand_id#32, brand#33, i_manufact_id#9, i_manufact#10, ext_price#34]
Arguments: 100, [ext_price#34 DESC NULLS LAST, brand#33 ASC NULLS FIRST, brand_id#32 ASC NULLS FIRST, i_manufact_id#9 ASC NULLS FIRST, i_manufact#10 ASC NULLS FIRST], [brand_id#32, brand#33, i_manufact_id#9, i_manufact#10, ext_price#34]

